<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-01T20:44:00-05:00</updated><id>http://localhost:4000/</id><title type="html">josh shi</title><subtitle>josh shi cool man funny website haha</subtitle><entry><title type="html">Pyrus</title><link href="http://localhost:4000/unpublished/2018/01/01/pyrus.html" rel="alternate" type="text/html" title="Pyrus" /><published>2018-01-01T18:32:00-05:00</published><updated>2018-01-01T18:32:00-05:00</updated><id>http://localhost:4000/unpublished/2018/01/01/pyrus</id><content type="html" xml:base="http://localhost:4000/unpublished/2018/01/01/pyrus.html">&lt;p&gt;Over the past few quarters, my partner and I have been working on a research project focused on learning more about how we might design a collaborative coding game which helps novice computer science students develop their programming problem-solving skills. We recently submitted a paper to CHI 2018’s Student Research Competition, which focuses mostly on the design arguments for our system and our research contributions, but didn’t give us a chance to talk about some of the interesting technical challenges we faced and how we tackled those. In this post, I’ll be talking about how we used Redux on the back-end to synchronize game state across the server and multiple clients.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;To provide some context, our system involved a game which had a few standard game-like components, like a board and a deck. Different actions taken by the players would mutate the state of the game across components, e.g. a player drawing a card would pop a card off the top of the deck and push it onto the player’s hand. All these changes needed to be propagated to all clients in real time and needed to be handled on the same way to ensure that state changes were consistent.&lt;/p&gt;

&lt;p&gt;We went back and forth on a few different methods for managing state, but we eventually realized that Redux was probably the best way to go for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We were mainly concerned about keeping game state in sync between the server (the source of truth) and multiple clients. From a bit of digging online, we realized the &lt;a href=&quot;https://gamedev.stackexchange.com/questions/28820/how-do-i-sync-multiplayer-game-state-more-efficiently-than-full-state-updates&quot;&gt;typical&lt;/a&gt; way to do this in multiplayer games is to keep game state stored in a well-defined object model and &lt;em&gt;transmit all changes to game state as events&lt;/em&gt;. This is pretty much Redux’s bread and butter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using Redux on the back-end meant we could reuse much of our Redux code (e.g. actions, reducers, etc) on the front-end. Not only did it save us a lot of time from not having to write and maintain two sets of code that did the same thing, it also ensured that all actions were handled in exactly the same way between client and server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We also needed the ability to intercept actions (e.g. in order to log them to a file) as they were dispatched. Redux allows you to do this really well through middleware.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But there was one sticking point: Redux is usually paired with a view library like React, and we weren’t able to find much information online about Redux being used on the server. This meant we had our work cut out for us as far as figuring out the best way to organize our application.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Our solution was to create a Game class which configures a Redux store in its constructor. Once a Game object is instantiated, its store becomes a member variable (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;this._store&lt;/code&gt;) of that object. This is what we use in place of traditional member variables to mutate the state of the game. Now, any time we want to dispatch an action, we can simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;this._store.dispatch(someActionCreator());&lt;/code&gt;  from within the Game itself.&lt;/p&gt;

&lt;p&gt;Being able to do this is nice because it affords us a few benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We can expose a very simple API for interacting with the Game object. Outside code can call methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;game.start()&lt;/code&gt; instead of dispatching actions directly on a store themselves. (This abstraction carries over to all other objects, like our object for Deck or Board, since we construct those from the Game object we pass down the store to them too.) Additionally, if we ever need to fire multiple actions in sequence, we can just do that in a very straightforward way by simply writing out those dispatches one after another. No messing with thunks necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can also keep all the business logic in the classes. There are a lot of checks in place to make sure that the game doesn’t end up in an invalid state, e.g. by allowing an inactive player to make a move or by executing an action that was actually illegal. Without a class to wrap all these checks around, they would probably all end up in the action. This object-oriented approach makes our code much easier to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This also provides an easy, reliable way to access member variables. Instead of keeping a laundry list of member variables that we mutate ourselves, we define getters which simply return the corresponding attribute via a call to  &lt;code class=&quot;highlighter-rouge&quot;&gt;this.store.getState().attrib&lt;/code&gt; within the class. This means we can avoid storing redundant information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To take a look at how this works in practice, here’s some annotated example code (the following snippet is close to our implementation, but with some simplifications made for illustration purposes):&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootReducer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../reducers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gameStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../actions/game'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../Board'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the constructor initializes the Redux store and puts it&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// in a member variable of the Game object&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the &quot;board&quot; here is an object which encapsulates all&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &quot;physical&quot; game components, e.g. players and the deck.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// all components get passed the store&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// this getter exposes a clean way for outside code to get &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// information from the Redux store without having to know&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// the actual layout of the store tree&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// returns whether the game successfully started&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a check to make sure we don't end up in an invalid&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// state (i.e. starting the game when we shouldn't be.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GAME_STATUS_INIT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// to mutate state, we dispatch actions to our this._store&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// we can easily dispatch multiple subsequent actions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// like status above, board.players is actually a getter&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// that fetches an attribute from the state tree&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// bonus: the deck.draw function called here also&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// dispatches multiple actions to the store. since&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// we passed in the store in the board, which in turn&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// passes it to the deck, we can implement the draw &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// function in the deck and provide a much simpler&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// abstraction to use here&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPlayerHand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned above, using the same representation of game state on the server and the client made managing updates between clients really easy. We basically set up a WebSocket connection between the server and all the clients whenever a new client joins a game. On that connection, the server sends over the JSON representation of the current game state. Once that connection is established, the client will send a message to the server whenever it performs an action (the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify()&lt;/code&gt;’d Redux action). The server takes each message, parses it, does all the necessary checking, and handles that action. Attached to the store on the back-end is some custom middleware that intercepts every action and broadcasts it to all clients listening on that WebSocket connection. Those clients then receive those incoming WebSocket messages and dispatch each action on their own stores. This way, we guarantee that every state mutation the server applies is sent to the client as well.&lt;/p&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;p&gt;A friend of mine recently pointed me to &lt;a href=&quot;https://github.com/google/boardgame.io&quot;&gt;boardgame.io&lt;/a&gt;, a framework which is conceptually very similar to what I outlined above and provides a good layer of abstraction over all that state-management stuff. Check it out if you’re interested in a solution similar to what I’ve discussed that’s ready out-of-the-box.&lt;/p&gt;</content><author><name></name></author><summary type="html">Over the past few quarters, my partner and I have been working on a research project focused on learning more about how we might design a collaborative coding game which helps novice computer science students develop their programming problem-solving skills. We recently submitted a paper to CHI 2018’s Student Research Competition, which focuses mostly on the design arguments for our system and our research contributions, but didn’t give us a chance to talk about some of the interesting technical challenges we faced and how we tackled those. In this post, I’ll be talking about how we used Redux on the back-end to synchronize game state across the server and multiple clients.</summary></entry><entry><title type="html">NURJ Vol. 12</title><link href="http://localhost:4000/2017/06/18/nurj-vol-12.html" rel="alternate" type="text/html" title="NURJ Vol. 12" /><published>2017-06-18T21:15:04-04:00</published><updated>2017-06-18T21:15:04-04:00</updated><id>http://localhost:4000/2017/06/18/nurj-vol-12</id><content type="html" xml:base="http://localhost:4000/2017/06/18/nurj-vol-12.html">&lt;p&gt;You can see the contents of the 2016-17 edition of the NURJ &lt;a href=&quot;http://www.thenurj.com/issues/vol-12&quot;&gt;here&lt;/a&gt;.
&lt;img src=&quot;/assets/images/nurj12/nurj_cover.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">You can see the contents of the 2016-17 edition of the NURJ here.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/nurj12/nurj_cover.jpg" /></entry><entry><title type="html">thenurj.com</title><link href="http://localhost:4000/2017/04/22/the-nurj-com.html" rel="alternate" type="text/html" title="thenurj.com" /><published>2017-04-22T21:15:04-04:00</published><updated>2017-04-22T21:15:04-04:00</updated><id>http://localhost:4000/2017/04/22/the-nurj-com</id><content type="html" xml:base="http://localhost:4000/2017/04/22/the-nurj-com.html">&lt;p&gt;Recently, I’ve been working on creating the website for the Northwestern Undergraduate Research Journal (NURJ). The project spanned a few months and has taught me a lot, especially about making technical decisions with non-technical people in mind. The website is live at &lt;a href=&quot;http://www.thenurj.com&quot;&gt;thenurj.com&lt;/a&gt; and you can find the code behind it on &lt;a href=&quot;https://github.com/nurj/nurj&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The previous iteration of our website was built on Squarespace a few years before I joined the staff. This made it really easy for them to get a site off the ground, but it made it extremely difficult to add new content and train new members to use the system, since many different pages had to be updated whenever new content was uploaded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thenurj.com/nurj-squarespace.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On another point, we had recently updated the look of our print journal and the website no longer reflected our identity. We took this as an opportunity for a &lt;em&gt;tabula rasa&lt;/em&gt; and build a new site from the ground up tailored exactly to our needs.&lt;/p&gt;

&lt;h2 id=&quot;our-approach&quot;&gt;Our Approach&lt;/h2&gt;
&lt;p&gt;I enlisted the help of our Art Director &lt;a href=&quot;http://www.florencefu.com&quot;&gt;Florence Fu&lt;/a&gt;, and we started thinking about the purpose behind the NURJ’s web presence.&lt;/p&gt;

&lt;p&gt;To provide some background, the NURJ is a student publication which features undergraduate research at Northwestern University. Our flagship, the print journal, comes out once a year, at the end of Spring quarter, and comprises the senior theses from the previous academic year which were selected to be the best in their departments, as well as a few features on faculty at Northwestern who do interesting research. The website carries not only the content which goes in our print journal but also theses which undergraduates submit to us throughout the year and other features we write on university faculty.&lt;/p&gt;

&lt;p&gt;One of our most important realizations was that our journal is not a typical student publication. There are a few things that set it apart from other student pubs, like magazines or daily newspapers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We primarily publish theses written by undergraduate students. These pieces can be intellectually dense and run anywhere from 5,000-10,000 words.&lt;/li&gt;
  &lt;li&gt;We also don’t come out with new content as often as other publications. We publish around five times a year, with the biggest release (the theses which also go in our print journal) coming out at the end of the academic year.&lt;/li&gt;
  &lt;li&gt;Theses in general are pretty complex. They have a lot of metadata associated with them (you can check out the full schema for a thesis &lt;a href=&quot;https://github.com/nurj/nurj/blob/master/EDITING.md#thesis&quot;&gt;here&lt;/a&gt;) and have certain requirements, like citations which go along with specific sentences.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This made our priorities a little different from a typical publication as far as displaying content and navigation on the site was concerned. For example, while it might be more important for a newsmagazine to display the most recent or most popular articles, we didn’t feel like that applied to us, since the most “important” pieces we published were usually those that went in the print issue. We wanted that to be the focus when landing on the website, and for other content to appear after that.&lt;/p&gt;

&lt;p&gt;Another top priority for us was readability. Since our theses were so long-form, it was important to provide a comfortable reading experience. For that reason, we wanted to display citations to theses alongside the text if the author had chosen to use inline rather than parenthetical citations. This also meant that we would need to pay extra attention to typography.&lt;/p&gt;

&lt;p&gt;We also had a few things to consider from the operations side. Since we couldn’t count on always having a technically-minded person on our staff, we wanted to make sure that the barrier to entry for maintaining the site was as low as possible. This meant we needed a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A smooth editor so that even those without a technical background can upload and manage content on the site.&lt;/li&gt;
  &lt;li&gt;A hands-off website management experience that allowed us to make as many things configurable through the CMS as possible.&lt;/li&gt;
  &lt;li&gt;At the same time, the website should be as customizable as possible, yet the codebase should still be easy to understand and move around in. This meant &lt;em&gt;good documentation.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, we also wanted our website to be performant. If users were going to put in the time to read through a condensed thesis equivalent in length to 10 pages of material, we didn’t want them to have to wait for images or fonts to load (this is an issue especially because some theses use a lot of figures).&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;
&lt;p&gt;There were a lot of options we explored for our CMS, from something as stripped back as using a Github Pages-hosted Jekyll blog to using WordPress as the CMS/editor and serving content by fetching it from the &lt;a href=&quot;https://developer.wordpress.org/rest-api/&quot;&gt;WordPress API&lt;/a&gt;. Eventually, we settled on &lt;a href=&quot;https://prismic.io&quot;&gt;Prismic&lt;/a&gt;. Prismic provides an incredibly expressive format for defining custom content types, which made working with our content super easy. It’s also headless, so it allows us to use whatever back- and front-end that would be most convenient for us.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aside: one thing I would’ve liked to explore but didn’t find out about until recently is using &lt;a href=&quot;https://www.drivecms.xyz&quot;&gt;Google Drive as a CMS&lt;/a&gt;, with documents written in a human-friendly markup format like &lt;a href=&quot;http://archieml.org&quot;&gt;ArchieML&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The actual website is powered by a pretty simple Node/Express app which uses the Prismic API to fetch content, then fills out Pug templates. We really liked the simplicity of a project with this structure–it’s very easy for someone with even a rudimentary knowledge of HTML/CSS to get on board and make changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thenurj.com/nurj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The styles for the website are written in Sass. Both the Sass and the front-end Javascript follow the &lt;a href=&quot;https://gist.github.com/cuibonobo/16f555c0047ab80044cf&quot;&gt;Medium style guide&lt;/a&gt;. We try to keep files as short as possible by moving lots of things into components.&lt;/p&gt;

&lt;p&gt;Our copy is set with maximum legibility in mind. Titles and ancillary information use the typefaces we use in our print journal, loaded in as web fonts. To alleviate this burden on page load, we set our body copy in system fonts. The type is big and has a generous amount of leading, and is set on top of our background which is a little less harsh than pure white.&lt;/p&gt;

&lt;p&gt;There are still a few things that we’re still trying to figure out how to integrate into our workflow while maintaining ease of use (for example, compressing images before uploading them to the site). Even though we’re live, the website is definitely still a living, breathing project and we’re constantly making updates and pushing changes. If you just wanna check out the code, you can view it on &lt;a href=&quot;https://github.com/nurj/nurj&quot;&gt;Github&lt;/a&gt;, and if you’re interested in helping out feel free to shoot us an &lt;a href=&quot;http://www.thenurj.com/join&quot;&gt;message&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently, I’ve been working on creating the website for the Northwestern Undergraduate Research Journal (NURJ). The project spanned a few months and has taught me a lot, especially about making technical decisions with non-technical people in mind. The website is live at thenurj.com and you can find the code behind it on Github.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/thenurj.com/nurj.jpg" /></entry><entry><title type="html">slag</title><link href="http://localhost:4000/2017/02/08/slag.html" rel="alternate" type="text/html" title="slag" /><published>2017-02-08T20:15:04-05:00</published><updated>2017-02-08T20:15:04-05:00</updated><id>http://localhost:4000/2017/02/08/slag</id><content type="html" xml:base="http://localhost:4000/2017/02/08/slag.html">&lt;p&gt;&lt;em&gt;This was a project I worked on with my good buddy &lt;a href=&quot;http://www.brandonfujii.com&quot;&gt;Brandon Fujii&lt;/a&gt;. You can find the code for slag on Github &lt;a href=&quot;https://github.com/thehandsomepanther/slag&quot;&gt;here&lt;/a&gt; or see the npm module &lt;a href=&quot;https://www.npmjs.com/package/slag-cli&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Up until last year, I was doing all my work on a late 2008 13” Macbook with eight gigs of ram. It wasn’t impossible to get things done, but there were some tasks which took a long time or would start my fan spinning (like launching Illustrator or watching videos on YouTube).&lt;/p&gt;

&lt;p&gt;There was one thing, though, that absolutely destroyed me every time I opened up my laptop: Slack. I use Slack as my go-to communication app for student groups, which meant that I was liable to be signed into around five Slack teams at any point in time.&lt;/p&gt;

&lt;p&gt;The Slack desktop app is build on Github’s Electron, which in turn uses Chromium on the front-end. Chromium is &lt;a href=&quot;http://unix.stackexchange.com/questions/140153/how-to-reduce-chromes-virtual-memory-usage/338111#338111&quot;&gt;pretty&lt;/a&gt; &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=393395&quot;&gt;notorious&lt;/a&gt; for being a memory hog, so it’s not hard to see how that could affect desktop applications built on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/slag/activity-monitor.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a screenshot taken on my current work machine, a late 2014 15” Macbook Pro with 16 gigs of ram. At the time this screenshot was taken, I had Slack open for about three minutes. It’s already using up more than a gigabyte of my memory.&lt;/p&gt;

&lt;h2 id=&quot;our-approach&quot;&gt;Our Approach&lt;/h2&gt;

&lt;p&gt;From the beginning, the goal of slag was never to replace the Slack app completely–after all, the apps are great. What we wanted was a stripped down version of Slack that was much lighter. Something a user would be able to use on a day-to-day basis for the majority of Slack communications. A client that provided 80% of Slack’s functionality using 20% of the memory.&lt;/p&gt;

&lt;p&gt;This client would ideally provide the essentials of Slack as well as a small subset of the niceties. So while we first set out to implement the larger parts of the Slack app (the messaging, team and channel switching, etc), we also recognized that a lot of the joy of using Slack comes from the little things (emoji, @-mentions, /-commands), and we wanted to recreate those as well.&lt;/p&gt;

&lt;p&gt;Thankfully, Slack provides a very helpful &lt;a href=&quot;https://api.slack.com/web&quot;&gt;web API&lt;/a&gt; that had almost everything we needed to build out the messaging part. For the ncurses-like terminal GUI, we used a Javascript library called &lt;a href=&quot;https://github.com/chjj/blessed&quot;&gt;blessed&lt;/a&gt;, along with some components from &lt;a href=&quot;https://github.com/yaronn/blessed-contrib&quot;&gt;blessed-contrib&lt;/a&gt; and a few custom components as well.&lt;/p&gt;

&lt;h2 id=&quot;a-few-challenges&quot;&gt;A Few Challenges&lt;/h2&gt;

&lt;p&gt;/-commands like giphy aren’t exposed in Slack’s public web API, but by looking at network calls in a browser we were able to figure them out. @-mentions required some regex expressions to decipher and assemble. Supporting Slack’s colon-flanked &lt;code class=&quot;highlighter-rouge&quot;&gt;:emoji-code:&lt;/code&gt; was a little more of an exercise since Javascript pre-ES6 doesn’t support unicode, but we were able to get it working using surrogate pairs.&lt;/p&gt;

&lt;p&gt;With the actual client working, we then worked on improving usability. We put the client on &lt;a href=&quot;https://www.npmjs.com/package/slag-cli&quot;&gt;npm&lt;/a&gt; to make it easier to install. Since this was my first npm module, I learned a ton about publishing to npm and writing npm scripts.&lt;/p&gt;

&lt;p&gt;We also realized that adding tokens (i.e. providing credentials) for a team was still a pain. We added some useful commands (namely, &lt;code class=&quot;highlighter-rouge&quot;&gt;slag --set-token &amp;lt;token&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;slag --set-tokens &amp;lt;json-file&amp;gt;&lt;/code&gt;) to make that process easier as well as a helpful manual for new users.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;When all was said and done, we ended up with a Slack terminal client that supported&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;messaging (no points there)&lt;/li&gt;
  &lt;li&gt;team switching (still no points, but a gold sticker for trying)&lt;/li&gt;
  &lt;li&gt;native notifications when someone @-mentioned you or sent you a DM&lt;/li&gt;
  &lt;li&gt;emoji and Slack’s emoji-code&lt;/li&gt;
  &lt;li&gt;/-commands&lt;/li&gt;
  &lt;li&gt;@-mentions&lt;/li&gt;
  &lt;li&gt;marking channels which had unread messages with an asterisk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some things are a little more difficult to implement in a text-based GUI. Among those are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;images/videos&lt;/li&gt;
  &lt;li&gt;links (get printed out, but can run off the screen if they’re too long)&lt;/li&gt;
  &lt;li&gt;threads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also measured our memory usage. This is for a slag client signed into four teams, although results should be comparable across more or fewer team sign-ins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/slag/memory.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps--retrospective&quot;&gt;Next Steps &amp;amp; Retrospective&lt;/h2&gt;

&lt;p&gt;We’re currently working on transpiling slag over from ES6 so it can be used with older versions of Node. If I had the chance to start this project over again, I probably would’ve paid a little more attention to making sure that transpiling would be easier down the road. While we did get to use some nifty ES6 features to handle the asynchronous API calls, it would’ve also been nice to think about accessibility from the get-go.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Slack has since made some &lt;a href=&quot;https://slack.engineering/reducing-slacks-memory-footprint-4480fec7e8eb#.79f8z8m33&quot;&gt;improvements&lt;/a&gt; to the client by moving certain teams over to a “minimal client” which a much smaller memory footprint. The full client, however, appears to use the same amount of memory.&lt;/p&gt;</content><author><name></name></author><summary type="html">This was a project I worked on with my good buddy Brandon Fujii. You can find the code for slag on Github here or see the npm module here.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/slag/slag.png" /></entry><entry><title type="html">Collaborative Code Competitions</title><link href="http://localhost:4000/unpublished/2017/02/07/ccc.html" rel="alternate" type="text/html" title="Collaborative Code Competitions" /><published>2017-02-07T20:15:04-05:00</published><updated>2017-02-07T20:15:04-05:00</updated><id>http://localhost:4000/unpublished/2017/02/07/ccc</id><content type="html" xml:base="http://localhost:4000/unpublished/2017/02/07/ccc.html">&lt;p&gt;This is my current research project for a class called Design, Technology, and Research. I’m advised by Nell O’Rourke and Haoqi Zhang; my research is funded by an Undergraduate Research Grant from the university.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Prior research has demonstrated that &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.3102/00346543069001021&quot;&gt;students learn undergraduate science, technology, engineering, and math concepts better&lt;/a&gt; &lt;a href=&quot;http://scholar.lib.vt.edu/ejournals/JTE/v7n1/gokhale.jte-v7n1.html?ref=Sawos.Org&quot;&gt;when they learn in a collaborative setting&lt;/a&gt;. Despite this, many resources for learning computer science and programming concepts (e.g. Hackerrank, Codecademy, etc.) available online put students in an isolated environment.&lt;/p&gt;

&lt;p&gt;Collaborative Code Competitions explores whether we can structure a learning environment which can promote collaborative behaviors among students. Specifically, we test this by scaffolding programming tasks for collaborative behaviors.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is my current research project for a class called Design, Technology, and Research. I’m advised by Nell O’Rourke and Haoqi Zhang; my research is funded by an Undergraduate Research Grant from the university.</summary></entry><entry><title type="html">steganotes</title><link href="http://localhost:4000/2017/02/05/steganotes.html" rel="alternate" type="text/html" title="steganotes" /><published>2017-02-05T20:15:04-05:00</published><updated>2017-02-05T20:15:04-05:00</updated><id>http://localhost:4000/2017/02/05/steganotes</id><content type="html" xml:base="http://localhost:4000/2017/02/05/steganotes.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">WildHacks 2016</title><link href="http://localhost:4000/2017/02/04/wildhacks-2016.html" rel="alternate" type="text/html" title="WildHacks 2016" /><published>2017-02-04T20:15:04-05:00</published><updated>2017-02-04T20:15:04-05:00</updated><id>http://localhost:4000/2017/02/04/wildhacks-2016</id><content type="html" xml:base="http://localhost:4000/2017/02/04/wildhacks-2016.html">&lt;p&gt;It’s a bit of an open secret among hackathon attendees that these events are a “sometimes” thing, in the same way that half a sleeves of Oreos is a “sometimes” food. Hackathons, while fun, do require you to essentially give up an entire weekend to work on a project of questionable permanence under borderline inhumane working conditions.&lt;/p&gt;

&lt;p&gt;So what can we do, as organizers, to convince hackers to come to &lt;em&gt;our&lt;/em&gt; hackathon, that their sleepless, showerless weekend should be spent at &lt;em&gt;our&lt;/em&gt; university in &lt;em&gt;our&lt;/em&gt; student center? This was the question we tried to answer as we developed our branding for the event.&lt;/p&gt;

&lt;p&gt;There were two things we knew we wanted our attendees to feel. First, we wanted them to be invested in the hackathon, both in the event itself and in what they were building. We were also aware of another common issue among hackathons, which was that beginners often felt intimidated, and as a result either wouldn’t register for the event or would attend but leave halfway through because they didn’t feel like they could compete. This was something that even a lot of us on the organizing team had experienced, and we knew that inclusion was a large part of cultivating a healthy hacker culture.&lt;/p&gt;

&lt;p&gt;How do you get hackers invested in something? To answer that we looked at what hackers were already themselves invested in. This turned out to be pretty obvious: hackers, as the name implies, love to hack. They love to create and to watch things come to life. They are makers for their own sake.&lt;/p&gt;

&lt;p&gt;We wanted to build that sense of investment by providing these hackers with a stake in the event themselves. Our theme, “Build-Your-Own-Hackathon,” was the result. A hackathon put on for hackers, with the hackers.&lt;/p&gt;

&lt;p&gt;To this end, we put out polls on Facebook asking attendees what they wanted from us for certain parts of the event, letting them decide everything from the kinds of programming we put on to the snacks they ate. We also allowed attendees to submit lightning talks they wanted to give at the event, which hackers then voted on.&lt;/p&gt;

&lt;p&gt;Now what about inclusivity? “Hacking” as a term is often associated with sinister images of men wearing hoodies in dark rooms crouched over a laptop screen, glowing green text scrolling across a terminal screen at a mile a minute. This obviously isn’t an accurate depiction of what goes on at a hackathon, but the fact that it exists means we had our work cut out for us.&lt;/p&gt;

&lt;p&gt;We wanted to subvert this image and create an atmosphere where people of all skill levels could feel like they could come and learn something, if not build a project in 36 hours (aside: this is a topic covered very well and in greater depth by game designer Jenny Hsia in her GDC talk, &lt;a href=&quot;http://www.gdcvault.com/play/1024289/Put-a-Face-on-It&quot;&gt;Put a Face On It: The Aesthetics of Cute&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One idea we came upon was to make characters out of common computer science concepts/various tech-related objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/sketch.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also started working toward a unifying theme, which we stumbled upon during a brainstorming session while we were working on our sponsor packet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/sponsorpacket-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s confetti! It was a natural fit, after we thought about it. The confetti made the event seem like a party, a party everyone was invited to. Confetti gave us brevity, excitement, and a versatile visual motif all at the same time.&lt;/p&gt;

&lt;p&gt;For our type treatment, we chose Avenir Next and Space Mono (we originally went with Fira Code as our monospace, the remnants of which you can see in the sponsor packet). We chose Avenir for its simple, friendly forms and Space Mono as its quirky sidekick, an homage to code, but every bit as fun, if not more, as Avenir.&lt;/p&gt;

&lt;p&gt;We got to have some fun with the website too. If you visit &lt;a href=&quot;http://wildhacks.org&quot;&gt;wildhacks.org&lt;/a&gt;, you’ll be greeted with a splash page with a nice little animation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/site-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also got to make some cool pins starring a few of our computer science characters (an LED and an old-school computer).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/pins.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As well as some &lt;em&gt;sick&lt;/em&gt; shirts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/team.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, I had a blast working with the team to put on WildHacks. Juggling tech, design and directing was a bit hectic at times, but it was definitely all worth it. Beyond here are just a few more pieces of branding ephemera from the event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/teaser.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A gif we used to tease the launch of the website to build hype. This was released on social media three days before the launch. We had similar gifs for the next two days as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/promo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flyer for an event we held on campus to promote the event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/compy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s compy! A winking computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wh2016/led.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s an LED (this one doesn’t have a fun name, sorry).&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s a bit of an open secret among hackathon attendees that these events are a “sometimes” thing, in the same way that half a sleeves of Oreos is a “sometimes” food. Hackathons, while fun, do require you to essentially give up an entire weekend to work on a project of questionable permanence under borderline inhumane working conditions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/wh2016/wh2016.png" /></entry><entry><title type="html">NURJ Vol. 11</title><link href="http://localhost:4000/2017/02/03/nurj.html" rel="alternate" type="text/html" title="NURJ Vol. 11" /><published>2017-02-03T20:15:04-05:00</published><updated>2017-02-03T20:15:04-05:00</updated><id>http://localhost:4000/2017/02/03/nurj</id><content type="html" xml:base="http://localhost:4000/2017/02/03/nurj.html">&lt;p&gt;&lt;img src=&quot;/assets/images/nurj/nurj.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/nurj/spread-1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/nurj/spread-2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/nurj/spread-3.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/nurj/spread-4.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/nurj/spread-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/nurj/nurj.png" /></entry><entry><title type="html">loft.io</title><link href="http://localhost:4000/unpublished/2017/02/02/loft.html" rel="alternate" type="text/html" title="loft.io" /><published>2017-02-02T20:15:04-05:00</published><updated>2017-02-02T20:15:04-05:00</updated><id>http://localhost:4000/unpublished/2017/02/02/loft</id><content type="html" xml:base="http://localhost:4000/unpublished/2017/02/02/loft.html">&lt;p&gt;Last year, I was part of a team of researchers interested in understanding the experience behind using the &lt;a href=&quot;https://loft.io&quot;&gt;Loft&lt;/a&gt;, an online platform created to help user-centered designers work more quickly and efficiently by scaffolding out the design process.&lt;/p&gt;

&lt;p&gt;We investigated how user-centered design teams worked, how they understood Loft and its role, and what we could to do better scaffold their own processes and help them work more efficiently.&lt;/p&gt;

&lt;p&gt;The Loft has a lot of parts, since it’s meant to provide structure for the user-centered design process in a supportive, non-intrusive way. A few features include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an activity feed that lets you see what your team has been working on&lt;/li&gt;
  &lt;li&gt;a project plan, which gives team members an at-a-glance understanding of where their project is&lt;/li&gt;
  &lt;li&gt;“libraries” for that allow designers to quickly access common “goals” (high-level tasks that a team wants to accomplish, e.g. “user testing”)&lt;/li&gt;
  &lt;li&gt;support for holding feedback sessions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our process for research was something like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Determine what our research questions were and form our hypotheses. This usually came from previous work (e.g. we now know that __ happens, could we use __ to help fix that?) or from the software team who were building out features to be tested.&lt;/li&gt;
  &lt;li&gt;Create a testing procedure. This included a list of questions to ask or tasks we would ask users to perform, depending on what we were investigating. This also included information on what data/information to collect and how to do it.&lt;/li&gt;
  &lt;li&gt;Combine our data and synthesize a report.&lt;/li&gt;
  &lt;li&gt;Hand off our findings and start over again.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Last year, I was part of a team of researchers interested in understanding the experience behind using the Loft, an online platform created to help user-centered designers work more quickly and efficiently by scaffolding out the design process.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/loft/loft.png" /></entry><entry><title type="html">WildHacks 2015</title><link href="http://localhost:4000/2016/02/01/wildhacks-2015.html" rel="alternate" type="text/html" title="WildHacks 2015" /><published>2016-02-01T20:15:04-05:00</published><updated>2016-02-01T20:15:04-05:00</updated><id>http://localhost:4000/2016/02/01/wildhacks-2015</id><content type="html" xml:base="http://localhost:4000/2016/02/01/wildhacks-2015.html"></content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/wh2015/wh2015.png" /></entry></feed>